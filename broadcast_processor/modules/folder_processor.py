#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—É–Ω–∫—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import os
import re
import yaml
from pathlib import Path
from modules.database import DatabaseManager

def read_folder_path():
    """–ß–∏—Ç–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–∑ config.yaml"""
    try:
        with open('config.yaml', 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
            return config.get('folder_path', '–ò–Æ–õ–¨')
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return '–ò–Æ–õ–¨'
    except yaml.YAMLError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.yaml: {e}")
        return '–ò–Æ–õ–¨'

def parse_text_into_points(text_content):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—É–Ω–∫—Ç—ã –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π"""
    if not text_content or not isinstance(text_content, str):
        return []
    
    # –ò—â–µ–º –ø—É–Ω–∫—Ç—ã –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º: —á–∏—Å–ª–æ.(—Ç–µ–≥-–≤—Ä–µ–º—è) —Ç–µ–∫—Å—Ç –∏–ª–∏ —á–∏—Å–ª–æ) (—Ç–µ–≥-–≤—Ä–µ–º—è) —Ç–µ–∫—Å—Ç
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã: 1.(–≥—É–±–µ—Ä-57) —Ç–µ–∫—Å—Ç, 2.(–≥—É–±–µ—Ä-63) —Ç–µ–∫—Å—Ç, 3) (–≥—É–±–µ—Ä-49) —Ç–µ–∫—Å—Ç
    # –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–±–µ–ª–æ–º: 1.(–≥—É–±–µ—Ä 57) —Ç–µ–∫—Å—Ç
    # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–±–µ–ª–æ–≤: –ø–µ—Ä–µ–¥ —Å–∫–æ–±–∫–∞–º–∏, –∑–∞ —Å–∫–æ–±–∫–∞–º–∏, –≤–Ω—É—Ç—Ä–∏
    patterns = [
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –≥–∏–±–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–±–µ–ª–æ–≤
        # –§–æ—Ä–º–∞—Ç —Å —Ç–æ—á–∫–æ–π: 1. (—Ç–µ–≥-–≤—Ä–µ–º—è) –∏–ª–∏ 1.(—Ç–µ–≥ –≤—Ä–µ–º—è)
        r'(\d+)\.\s*\(\s*([^-()]+?)\s*-\s*(\d+)\s*\)\s*(.*?)(?=\d+[.)]\s*\(|$)',  # —Ç–µ–≥-–≤—Ä–µ–º—è
        r'(\d+)\.\s*\(\s*([^-()0-9\s]+(?:\s+[^-()0-9\s]+)*)\s+(\d+)\s*\)\s*(.*?)(?=\d+[.)]\s*\(|$)',  # —Ç–µ–≥ –≤—Ä–µ–º—è
        
        # –§–æ—Ä–º–∞—Ç —Å–æ —Å–∫–æ–±–∫–æ–π: 1) (—Ç–µ–≥-–≤—Ä–µ–º—è) –∏–ª–∏ 1)(—Ç–µ–≥ –≤—Ä–µ–º—è)  
        r'(\d+)\)\s*\(\s*([^-()]+?)\s*-\s*(\d+)\s*\)\s*(.*?)(?=\d+[.)]\s*\(|$)',  # —Ç–µ–≥-–≤—Ä–µ–º—è
        r'(\d+)\)\s*\(\s*([^-()0-9\s]+(?:\s+[^-()0-9\s]+)*)\s+(\d+)\s*\)\s*(.*?)(?=\d+[.)]\s*\(|$)',  # —Ç–µ–≥ –≤—Ä–µ–º—è
        
        # –ó–∞–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—É–Ω–∫—Ç–∞ (–±–µ–∑ lookahead)
        r'(\d+)\.\s*\(\s*([^-()]+?)\s*-\s*(\d+)\s*\)\s*(.*?)$',
        r'(\d+)\.\s*\(\s*([^-()0-9\s]+(?:\s+[^-()0-9\s]+)*)\s+(\d+)\s*\)\s*(.*?)$',
        r'(\d+)\)\s*\(\s*([^-()]+?)\s*-\s*(\d+)\s*\)\s*(.*?)$',
        r'(\d+)\)\s*\(\s*([^-()0-9\s]+(?:\s+[^-()0-9\s]+)*)\s+(\d+)\s*\)\s*(.*?)$'
    ]
    
    points = []
    found_positions = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    for i, pattern in enumerate(patterns):
        matches = re.finditer(pattern, text_content, re.DOTALL)
        
        for match in matches:
            start_pos = match.start()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é –º—ã –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏
            if start_pos not in found_positions:
                found_positions.add(start_pos)
                
                point_number = int(match.group(1))
                tag = match.group(2).strip()  # —Ç–µ–≥ (–≥—É–±–µ—Ä, –∞–¥–º–∏–Ω –∏ —Ç.–¥.)
                seconds = int(match.group(3))  # –≤—Ä–µ–º—è –∏–∑ —Å–∫–æ–±–æ–∫
                point_text = match.group(4).strip()  # —Ç–µ–∫—Å—Ç –ø—É–Ω–∫—Ç–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–Ω–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª–∏–Ω—É
                if len(point_text) >= 10:
                    points.append({
                        'value': point_text,
                        'seconds': seconds,
                        'tag': tag,
                        'point_number': point_number
                    })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø—É–Ω–∫—Ç–∞
    points.sort(key=lambda x: x.get('point_number', 0))
    
    return points

def read_odt_content_simple(file_path):
    """–ß–∏—Ç–∞–µ—Ç .odt —Ñ–∞–π–ª –∫–∞–∫ ZIP –∞—Ä—Ö–∏–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ content.xml"""
    try:
        import zipfile
        with zipfile.ZipFile(file_path, 'r') as zip_file:
            if 'content.xml' in zip_file.namelist():
                content = zip_file.read('content.xml').decode('utf-8')
                # –£–±–∏—Ä–∞–µ–º XML —Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                import re
                content = re.sub(r'<[^>]+>', '', content)
                content = re.sub(r'\s+', ' ', content).strip()
                return content, "odt_xml"
            else:
                return f"‚ùå –í .odt —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω content.xml", "odt_error"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .odt —Ñ–∞–π–ª–∞: {e}", "odt_error"

def read_odt_content_advanced(file_path):
    """–ß–∏—Ç–∞–µ—Ç .odt —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è odfpy –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    try:
        from odf import text, teletype
        from odf.opendocument import load
        doc = load(str(file_path))
        content = teletype.extractText(doc)
        return content, "odt_clean"
    except ImportError:
        # –ï—Å–ª–∏ odfpy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
        return read_odt_content_simple(file_path)
    except Exception as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
        return read_odt_content_simple(file_path)

def read_docx_content(file_path):
    """–ß–∏—Ç–∞–µ—Ç .docx —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è python-docx"""
    try:
        from docx import Document
        doc = Document(file_path)
        content = []
        for paragraph in doc.paragraphs:
            if paragraph.text.strip():
                content.append(paragraph.text)
        
        if content:
            return '\n'.join(content), "docx_clean"
        else:
            return "", "docx_empty"
    except ImportError:
        return f"‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "docx_error"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .docx —Ñ–∞–π–ª–∞: {e}", "docx_error"

def read_doc_content(file_path):
    """–ß–∏—Ç–∞–µ—Ç .doc —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è mammoth –∏–ª–∏ docx2txt"""
    try:
        import mammoth
        with open(file_path, "rb") as docx_file:
            result = mammoth.extract_raw_text(docx_file)
            if result.value:
                return result.value, "doc_clean"
            else:
                return "", "doc_empty"
    except ImportError:
        try:
            import docx2txt
            content = docx2txt.process(str(file_path))
            if content:
                return content, "doc_clean"
            else:
                return "", "doc_empty"
        except ImportError:
            return f"‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ mammoth –∏ docx2txt –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "doc_error"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .doc —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ docx2txt: {e}", "doc_error"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .doc —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ mammoth: {e}", "doc_error"

def read_file_content(file_path):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞"""
    file_ext = file_path.suffix.lower()
    
    # –î–ª—è .odt —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if file_ext == '.odt':
        return read_odt_content_advanced(file_path)
    
    # –î–ª—è .docx —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    elif file_ext == '.docx':
        return read_docx_content(file_path)
    
    # –î–ª—è .doc —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    elif file_ext == '.doc':
        return read_doc_content(file_path)
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        encodings = ['utf-8', 'cp1251', 'windows-1251', 'latin-1', 'iso-8859-1']
        
        for encoding in encodings:
            try:
                with open(file_path, 'r', encoding=encoding) as file:
                    content = file.read()
                    return content, encoding
            except UnicodeDecodeError:
                continue
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π
        try:
            with open(file_path, 'rb') as file:
                content = file.read()
                return f"[–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª, —Ä–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç]", "binary"
        except:
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª", "error"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}", "error"

def read_files_from_folder(folder_path, db_manager):
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    folder = Path(folder_path)
    
    if not folder.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ '{folder_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if not folder.is_dir():
        print(f"‚ùå –û—à–∏–±–∫–∞: '{folder_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π")
        return
    
    total_files = 0
    total_points = 0
    folder_results = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ –ø–∞–ø–∫–µ
    for item in folder.iterdir():
        if item.is_dir():
            print(f"üìÅ –ü–∞–ø–∫–∞: {item.name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
            files = list(item.glob('*'))
            files = [f for f in files if f.is_file()]  # –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –Ω–µ –ø–∞–ø–∫–∏
            
            if files:
                folder_files = 0
                folder_points = 0
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
                for file in files:
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    content, encoding = read_file_content(file)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    file_id = db_manager.save_file(
                        filename=file.name,
                        file_path=file,
                        file_type=file.suffix.lower(),
                        encoding=encoding
                    )
                    
                    if file_id:
                        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—É–Ω–∫—Ç—ã
                        points = parse_text_into_points(content)
                        if points:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–Ω–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            db_manager.save_points(file_id, points)
                            folder_points += len(points)
                            total_points += len(points)
                            print(f"  ‚úÖ {file.name}: {len(points)} –ø—É–Ω–∫—Ç–æ–≤")
                        else:
                            print(f"  ‚ö†Ô∏è {file.name}: –ø—É–Ω–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
                        folder_files += 1
                        total_files += 1
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–∞–ø–∫–µ
                folder_results.append({
                    'name': item.name,
                    'files': folder_files,
                    'points': folder_points
                })
                
                print(f"  üìä –ò—Ç–æ–≥–æ: {folder_files} —Ñ–∞–π–ª–æ–≤, {folder_points} –ø—É–Ω–∫—Ç–æ–≤")
                
            else:
                print("  üì≠ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞")
        
        elif item.is_file():
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            content, encoding = read_file_content(item)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            file_id = db_manager.save_file(
                filename=item.name,
                file_path=item,
                file_type=item.suffix.lower(),
                encoding=encoding
            )
            
            if file_id:
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—É–Ω–∫—Ç—ã
                points = parse_text_into_points(content)
                if points:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–Ω–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    db_manager.save_points(file_id, points)
                    total_points += len(points)
                    print(f"   ‚úÖ {item.name} ‚Üí {len(points)} –ø—É–Ω–∫—Ç–æ–≤")
                else:
                    print(f"   ‚ö†Ô∏è  {item.name} ‚Üí –ø—É–Ω–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                total_files += 1
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("=" * 40)
    print(f"üìÅ –ü–∞–ø–æ–∫: {len([item for item in folder.iterdir() if item.is_dir()])}")
    print(f"üìÑ –§–∞–π–ª–æ–≤: {total_files}")
    print(f"üìã –ü—É–Ω–∫—Ç–æ–≤: {total_points}")
    
    if folder_results:
        print("üìÇ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:")
        for result in folder_results:
            if result['points'] > 0:
                print(f"  üóÇÔ∏è {result['name']}: {result['files']} —Ñ–∞–π–ª–æ–≤, {result['points']} –ø—É–Ω–∫—Ç–æ–≤")
            else:
                print(f"  üóÇÔ∏è {result['name']}: {result['files']} —Ñ–∞–π–ª–æ–≤, –ø—É–Ω–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return total_files, total_points

def process_folder():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏"""
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_path = "points_database.db"
    if os.path.exists(db_path):
        try:
            os.remove(db_path)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ë–î: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_manager = DatabaseManager()
    
    # –ß–∏—Ç–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    folder_path = read_folder_path()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    total_files, total_points = read_files_from_folder(folder_path, db_manager)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    points = db_manager.get_all_points()
    if points:
        if len(points) != total_points:
            print(f"‚ö†Ô∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: –Ω–∞–π–¥–µ–Ω–æ {total_points}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(points)}")
    else:
        print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—É–Ω–∫—Ç–æ–≤")
    
    return db_manager 