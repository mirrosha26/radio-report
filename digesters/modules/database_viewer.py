#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
"""

from modules.database import DatabaseManager
import sqlite3
import os

def view_all_points():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—É–Ω–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_manager = DatabaseManager()
    
    print("üìã –í–°–ï –ü–£–ù–ö–¢–´ –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    points = db_manager.get_all_points()
    
    if not points:
        print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—É–Ω–∫—Ç–æ–≤")
        return
    
    current_file = None
    for point in points:
        filename, point_number, tag, seconds, content, created_at = point
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ
        if current_file != filename:
            current_file = filename
            print(f"\nüìÑ –§–ê–ô–õ: {filename}")
            print("-" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç
        print(f"üìå –ü—É–Ω–∫—Ç {point_number}: {tag.title()} | {seconds} —Å–µ–∫")
        print(f"üìÑ –¢–µ–∫—Å—Ç: {content[:100]}{'...' if len(content) > 100 else ''}")
        print(f"‚è∞ –°–æ–∑–¥–∞–Ω: {created_at}")
        print("-" * 40)

def view_database_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_manager = DatabaseManager()
    
    print("üóÑÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        with sqlite3.connect(db_manager.db_path) as conn:
            cursor = conn.cursor()
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            
            print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            for table in tables:
                table_name = table[0]
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"   üìä {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_size = os.path.getsize(db_manager.db_path)
            print(f"\nüíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_size} –±–∞–π—Ç ({db_size/1024:.1f} –ö–ë)")
            
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")

def delete_database():
    """–£–¥–∞–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db_manager = DatabaseManager()
    
    print("üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    try:
        if os.path.exists(db_manager.db_path):
            os.remove(db_manager.db_path)
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞: {db_manager.db_path}")
            print("üí° –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ë–î")
        else:
            print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ë–î: {e}")

def search_points_by_tag(tag):
    """–ò—â–µ—Ç –ø—É–Ω–∫—Ç—ã –ø–æ —Ç–µ–≥—É"""
    db_manager = DatabaseManager()
    
    print(f"üîç –ü–û–ò–°–ö –ü–£–ù–ö–¢–û–í –ü–û –¢–ï–ì–£: {tag.upper()}")
    print("=" * 60)
    
    try:
        with sqlite3.connect(db_manager.db_path) as conn:
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT 
                    f.filename,
                    p.point_number,
                    p.tag,
                    p.seconds,
                    p.content,
                    p.created_at
                FROM points p
                JOIN files f ON p.file_id = f.id
                WHERE LOWER(p.tag) LIKE LOWER(?)
                ORDER BY f.filename, p.point_number
            ''', (f'%{tag}%',))
            
            points = cursor.fetchall()
            
            if not points:
                print(f"‚ùå –ü—É–Ω–∫—Ç—ã —Å —Ç–µ–≥–æ–º '{tag}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—É–Ω–∫—Ç–æ–≤: {len(points)}")
            print("-" * 60)
            
            current_file = None
            for point in points:
                filename, point_number, point_tag, seconds, content, created_at = point
                
                if current_file != filename:
                    current_file = filename
                    print(f"\nüìÑ –§–ê–ô–õ: {filename}")
                    print("-" * 40)
                
                print(f"üìå –ü—É–Ω–∫—Ç {point_number}: {point_tag.title()} | {seconds} —Å–µ–∫")
                print(f"üìÑ –¢–µ–∫—Å—Ç: {content[:80]}{'...' if len(content) > 80 else ''}")
                print("-" * 30)
                
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

def get_points_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –ø—É–Ω–∫—Ç–∞–º"""
    db_manager = DatabaseManager()
    
    try:
        with sqlite3.connect(db_manager.db_path) as conn:
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤
            cursor.execute("SELECT COUNT(*) FROM points")
            total_points = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            cursor.execute("SELECT COUNT(*) FROM files")
            total_files = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–≥–∞–º –≤ —Ä–∞–∑–±–∏–≤–∫–µ –ø–æ –ø–∞–ø–∫–∞–º
            cursor.execute("""
                SELECT 
                    f.file_path,
                    p.tag, 
                    COUNT(*) as count
                FROM points p
                JOIN files f ON p.file_id = f.id
                GROUP BY f.file_path, p.tag 
                ORDER BY f.file_path, p.tag
            """)
            folder_tag_stats = cursor.fetchall()
            
            print(f"üìÅ –§–∞–π–ª–æ–≤: {total_files}")
            print(f"üìã –ü—É–Ω–∫—Ç–æ–≤: {total_points}")
            print("üè∑Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º –∏ —Ç–µ–≥–∞–º:")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞–ø–∫–∞–º
            folder_data = {}
            for file_path, tag, count in folder_tag_stats:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞–ø–∫—É –∏–∑ –ø—É—Ç–∏
                from pathlib import Path
                path_parts = Path(file_path).parts
                if len(path_parts) >= 2:
                    folder_name = path_parts[-2]  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø—É—Ç–∏
                else:
                    folder_name = "–ö–æ—Ä–µ–Ω—å"
                
                if folder_name not in folder_data:
                    folder_data[folder_name] = {}
                
                if tag not in folder_data[folder_name]:
                    folder_data[folder_name][tag] = 0
                
                folder_data[folder_name][tag] += count
            
            for folder_name, tags in folder_data.items():
                if folder_name != "–ö–æ—Ä–µ–Ω—å":
                    print(f"  üìÅ {folder_name}:")
                    for tag, count in tags.items():
                        print(f"    üìå {tag}: {count} –ø—É–Ω–∫—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–Ω–∫—Ç—ã –∫–æ—Ä–æ—á–µ 30 —Å–µ–∫—É–Ω–¥ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ–≥–∞ '–≥—É–±–µ—Ä'
            cursor.execute("""
                SELECT 
                    f.file_path,
                    p.tag, 
                    COUNT(*) as count
                FROM points p
                JOIN files f ON p.file_id = f.id
                WHERE p.seconds < 30 AND p.tag = '–≥—É–±–µ—Ä'
                GROUP BY f.file_path, p.tag 
                ORDER BY f.file_path, p.tag
            """)
            short_points_stats = cursor.fetchall()
            
            if short_points_stats:
                print("‚ö†Ô∏è –ü—É–Ω–∫—Ç—ã '–≥—É–±–µ—Ä' –∫–æ—Ä–æ—á–µ 30 —Å–µ–∫ (–∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –æ—Ç—á–µ—Ç–æ–≤):")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—É–Ω–∫—Ç—ã –ø–æ –ø–∞–ø–∫–∞–º
                short_folder_data = {}
                for file_path, tag, count in short_points_stats:
                    path_parts = Path(file_path).parts
                    if len(path_parts) >= 2:
                        folder_name = path_parts[-2]
                    else:
                        folder_name = "–ö–æ—Ä–µ–Ω—å"
                    
                    if folder_name not in short_folder_data:
                        short_folder_data[folder_name] = {}
                    
                    if tag not in short_folder_data[folder_name]:
                        short_folder_data[folder_name][tag] = 0
                    
                    short_folder_data[folder_name][tag] += count
                
                for folder_name, tags in short_folder_data.items():
                    if folder_name != "–ö–æ—Ä–µ–Ω—å":
                        print(f"  üìÅ {folder_name}:")
                        for tag, count in tags.items():
                            print(f"    ‚è±Ô∏è {tag}: {count} –ø—É–Ω–∫—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—É–Ω–∫—Ç—ã –±–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            cursor.execute("""
                SELECT COUNT(*) FROM points 
                WHERE (short_content IS NULL OR short_content = '' OR LENGTH(TRIM(short_content)) = 0)
            """)
            points_without_short = cursor.fetchone()[0]
            
            print("=" * 40)
            if points_without_short > 0:
                print(f"ü§ñ –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {points_without_short} –ø—É–Ω–∫—Ç–æ–≤...")
                process_points_with_gpt(db_manager)
            else:
                print("‚úÖ –í—Å–µ –ø—É–Ω–∫—Ç—ã –∏–º–µ—é—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            
            print("=" * 40)
            print("üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞...")
            create_excel_report()
            
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")


def create_excel_report():
    """–°–æ–∑–¥–∞–µ—Ç Excel –æ—Ç—á–µ—Ç —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–∞–ø–∫–∞–º –∏ —Ç–µ–≥–∞–º - –∫–∞–∂–¥—ã–π —Ç–µ–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω"""
    try:
        import pandas as pd
        from openpyxl import load_workbook
        from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
        from openpyxl.utils.dataframe import dataframe_to_rows
        import re
        import yaml
        from pathlib import Path
        import os
        
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–∞")
        print("=" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Pillow –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        try:
            import PIL
            pillow_available = True
        except ImportError:
            pillow_available = False
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ª–æ–≥–æ—Ç–∏–ø—ã –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            with open('config.yaml', 'r', encoding='utf-8') as file:
                config = yaml.safe_load(file)
                reports_config = config.get('reports', {})
                export_path = reports_config.get('path', 'reports')
                year = reports_config.get('year', '2024')
                min_duration = reports_config.get('min_duration_seconds', 30)
                docs_config = reports_config.get('docs', {})
        except:
            export_path = 'reports'
            year = '2024'
            min_duration = 30
            docs_config = {}
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        export_dir = Path(export_path)
        export_dir.mkdir(exist_ok=True)
        
        print(f"üìÅ –ü–∞–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_dir.absolute()}")
        print(f"üìÖ –ì–æ–¥: {year}")
        print(f"‚è±Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {min_duration} —Å–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–≥–∞ '–≥—É–±–µ—Ä')")
        
        # –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
        template_path = Path("../static/template.xlsx")
        if not template_path.exists():
            print(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
            return False
        
        print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω: {template_path}")
        
        db_manager = DatabaseManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∏—Ö –ø—É—Ç—è–º–∏
        with sqlite3.connect(db_manager.db_path) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–∞–ø–∫–∞–º
            cursor.execute("""
                SELECT 
                    filename,
                    file_path,
                    file_type,
                    encoding,
                    created_at
                FROM files 
                ORDER BY file_path
            """)
            
            files = cursor.fetchall()
            
            if not files:
                print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
                return False
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
            folder_groups = {}
            for file in files:
                filename, file_path, file_type, encoding, created_at = file
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞–ø–∫—É –∏–∑ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–Æ–õ–¨/–ö–ü/ -> –ö–ü)
                path_parts = Path(file_path).parts
                if len(path_parts) >= 2:
                    folder_name = path_parts[-2]  # –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
                else:
                    folder_name = "–ö–æ—Ä–µ–Ω—å"
                
                if folder_name not in folder_groups:
                    folder_groups[folder_name] = []
                
                folder_groups[folder_name].append({
                    'filename': filename,
                    'file_path': file_path,
                    'file_type': file_type,
                    'encoding': encoding,
                    'created_at': created_at
                })
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∏ Excel —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
            for folder_name, folder_files in folder_groups.items():
                if folder_name == "–ö–æ—Ä–µ–Ω—å":
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
                
                print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: {folder_name}")
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                folder_dir = export_dir / (folder_name + datetime.now().strftime("_%Y%m%d_%H%M%S"))
                folder_dir.mkdir(exist_ok=True)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –ø–∞–ø–∫–∏
                folder_config = docs_config.get(folder_name, {})
                month = folder_config.get('month', '–º–µ—Å—è—Ü')
                full_name = folder_config.get('full_name', '–§.–ò.–û.')
                company_short = folder_config.get('company_short', 'CXXX')
                company_full = folder_config.get('company_full', 'CFXXX')
                logo_path = folder_config.get('logo_path', '')
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è —ç—Ç–æ–π –ø–∞–ø–∫–∏
                cursor.execute("""
                    SELECT DISTINCT p.tag
                    FROM points p
                    JOIN files f ON p.file_id = f.id
                    WHERE f.file_path LIKE ?
                    ORDER BY p.tag
                """, (f'%{folder_name}%',))
                
                tags = cursor.fetchall()
                
                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–≥–∞
                for tag_row in tags:
                    tag = tag_row[0]
                    print(f"   üè∑Ô∏è –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ–≥–∞: {tag}")
                    
                    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
                    excel_filename = folder_dir / f"{tag}.xlsx"
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
                    wb = load_workbook(template_path)
                    ws = wb.active
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
                    add_logo_to_report(ws, logo_path)
                    
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–ø–∫—É –æ—Ç—á–µ—Ç–∞
                    fill_report_header(ws, year, month, full_name, company_short, company_full)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—É–Ω–∫—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–≥–∞ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¢–û–õ–¨–ö–û –¥–ª—è '–≥—É–±–µ—Ä')
                    cursor.execute("""
                        SELECT 
                            p.point_number,
                            f.filename,
                            p.tag,
                            p.seconds,
                            p.content,
                            p.short_content,
                            p.created_at
                        FROM points p
                        JOIN files f ON p.file_id = f.id
                        WHERE f.file_path LIKE ? AND p.tag = ? AND (p.tag != '–≥—É–±–µ—Ä' OR p.seconds >= ?)
                        ORDER BY f.filename, p.point_number
                    """, (f'%{folder_name}%', tag, min_duration))
                    
                    points = cursor.fetchall()
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–æ—Ç —Ä–∞–Ω–Ω–µ–π –∫ –ø–æ–∑–¥–Ω–µ–π)
                    if points:
                        from datetime import datetime
                        def _dt_key(rec):
                            # rec: (point_number, filename, tag, seconds, content, short_content, created_at)
                            fn = rec[1]
                            m = re.search(r'(\d{1,2})\.(\d{2})\s+–Ω–∞\s+(\d{1,2})-(\d{2})\D?', fn)
                            if m:
                                d, M, h, m_ = m.groups()
                                try:
                                    return datetime(int(year), int(M), int(d), int(h), int(m_))
                                except:
                                    return datetime.min
                            m2 = re.search(r'(\d{1,2})\.(\d{2})', fn)
                            if m2:
                                d, M = m2.groups()
                                try:
                                    return datetime(int(year), int(M), int(d))
                                except:
                                    return datetime.min
                            return datetime.min
                        points = sorted(points, key=_dt_key)
                    
                    if points:
                        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö —Å 15-–π —Å—Ç—Ä–æ–∫–∏ (—à–∞–ø–∫–∞ –≤ 14-–π)
                        start_row = 15
                        
                        # –°–æ–∑–¥–∞–µ–º –±–æ—Ä–¥–µ—Ä –¥–ª—è —è—á–µ–µ–∫
                        thin_border = Border(
                            left=Side(style='thin'),
                            right=Side(style='thin'),
                            top=Side(style='thin'),
                            bottom=Side(style='thin')
                        )
                        
                        # –î–∞–Ω–Ω—ã–µ
                        row = start_row
                        total_seconds = 0
                        for i, point in enumerate(points, 1):
                            point_number, filename, tag, seconds, content, short_content, created_at = point
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 1-2 —Ü–∏—Ñ—Ä –¥–Ω—è/—á–∞—Å–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–π –±—É–∫–≤—ã –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏)
                            dt_match = re.search(r'(\d{1,2})\.(\d{2})\s+–Ω–∞\s+(\d{1,2})-(\d{2})\D?', filename)
                            if dt_match:
                                d, M, h, m_ = dt_match.groups()
                                date_part = f"{int(d):02d}.{M}"
                                time_part = f"{int(h):02d}:{m_}"
                                broadcast_date_time = f"{date_part}.{year} {time_part}"
                            else:
                                d_match = re.search(r'(\d{1,2})\.(\d{2})', filename)
                                if d_match:
                                    d, M = d_match.groups()
                                    date_part = f"{int(d):02d}.{M}"
                                    broadcast_date_time = f"{date_part}.{year}"
                                else:
                                    broadcast_date_time = "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–ª–Ω—ã–π
                            display_text = short_content if short_content else content[:100] + "..." if len(content) > 100 else content
                            
                            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏ (B):
                            # A | B | C | D | E
                            #   | ‚Ññ –ø/–ø | –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –≤ —ç—Ñ–∏—Ä | –¢–µ–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ | –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ (–º–∏–Ω/—Å–µ–∫.)
                            ws.cell(row=row, column=2, value=i)  # ‚Ññ –ø/–ø (–∫–æ–ª–æ–Ω–∫–∞ B)
                            ws.cell(row=row, column=3, value=broadcast_date_time)  # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –≤ —ç—Ñ–∏—Ä (–∫–æ–ª–æ–Ω–∫–∞ C)
                            ws.cell(row=row, column=4, value=display_text)  # –¢–µ–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–∫–æ–ª–æ–Ω–∫–∞ D)
                            
                            # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã –∫–∞–∫ –µ—Å—Ç—å
                            ws.cell(row=row, column=5, value=seconds)  # –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∫–æ–ª–æ–Ω–∫–∞ E)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ä–¥–µ—Ä –∫ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–ª–æ–Ω–∫–∏ B-E)
                            for col in range(2, 6):  # –ö–æ–ª–æ–Ω–∫–∏ B, C, D, E
                                cell = ws.cell(row=row, column=col)
                                cell.border = thin_border
                            
                            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
                            total_seconds += seconds
                            
                            row += 1
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ –≤ –∫–æ–Ω—Ü–µ –±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞
                        total_materials = len(points)
                        total_minutes = total_seconds // 60
                        total_remaining_seconds = total_seconds % 60
                        total_time = f"{total_minutes} –º–∏–Ω {total_remaining_seconds:02d} —Å–µ–∫"
                        
                        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞ –æ—Ç –¥–∞–Ω–Ω—ã—Ö)
                        summary_row = row  # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                        ws.cell(row=summary_row, column=3, value="–ò—Ç–æ–≥–æ:")  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç—Ä–µ—Ç—å–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (C)
                        ws.cell(row=summary_row, column=4, value=f"{total_materials} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
                        ws.cell(row=summary_row, column=5, value=total_time)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Ä–¥–µ—Ä –∫ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ (–∫–æ–ª–æ–Ω–∫–∏ B-E)
                        for col in range(2, 6):  # –ö–æ–ª–æ–Ω–∫–∏ B, C, D, E (—Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞)
                            cell = ws.cell(row=summary_row, column=col)
                            cell.border = thin_border
                        
                        # –ù–ï –∏–∑–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel —Ñ–∞–π–ª
                    wb.save(excel_filename)
                    print(f"      ‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_filename.name}")
            
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ Excel –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {len(folder_groups)}")
            
            return True
            
    except ImportError as e:
        print(f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pandas openpyxl")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def add_logo_to_report(ws, logo_path):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥–æ—Ç–∏–ø –≤ –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª –æ—Ç—á–µ—Ç–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π 150px"""
    try:
        from pathlib import Path
        
        if not logo_path or not Path(logo_path).exists():
            print(f"      ‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Ç—å –ø—É—Å—Ç–æ–π: {logo_path}")
            return
        
        try:
            from openpyxl.drawing.image import Image
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = Image(logo_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            original_width = img.width
            original_height = img.height
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —à–∏—Ä–∏–Ω—ã 150px
            scale_factor = 150 / original_width
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É 150px –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
            img.width = 150
            img.height = int(original_height * scale_factor)

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ —è—á–µ–π–∫—É A1 (–≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª)
            ws.add_image(img, 'A1')
            
        except ImportError as e:
            if "Pillow" in str(e):
                print(f"      ‚ö†Ô∏è –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Pillow:")
                print(f"      üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install Pillow")
                print(f"      üìã –û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞")
            else:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
        print(f"      üìã –û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞")

def fill_report_header(ws, year, month, full_name, company_short, company_full):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —à–∞–ø–∫—É –æ—Ç—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–ø–∫–µ
        for row in range(1, 20):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
            for col in range(1, 10):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–æ–ª–æ–Ω–æ–∫
                cell = ws.cell(row=row, column=col)
                if cell.value and isinstance(cell.value, str):
                    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                    cell.value = cell.value.replace('YXXX', year)
                    cell.value = cell.value.replace('MXXX', month)
                    cell.value = cell.value.replace('GXXX', full_name)
                    cell.value = cell.value.replace('CXXX', company_short)
                    cell.value = cell.value.replace('CFXXX', company_full)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–ø–∫–∏: {e}")


def create_simple_excel_report():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π Excel –æ—Ç—á–µ—Ç –ø–æ –ø–∞–ø–∫–∞–º –±–µ–∑ –≤–∫–ª–∞–¥–æ–∫ - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        import pandas as pd
        from openpyxl import Workbook
        from openpyxl.styles import Font, PatternFill, Alignment
        import re
        import yaml
        from pathlib import Path
        
        print("üìä –°–û–ó–î–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û EXCEL –û–¢–ß–ï–¢–ê")
        print("=" * 40)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            with open('config.yaml', 'r', encoding='utf-8') as file:
                config = yaml.safe_load(file)
                reports_config = config.get('reports', {})
                export_path = reports_config.get('path', 'reports')
                min_duration = reports_config.get('min_duration_seconds', 30)
        except:
            export_path = 'reports'
            min_duration = 30
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        export_dir = Path(export_path)
        export_dir.mkdir(exist_ok=True)
        
        print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_dir.absolute()}")
        print(f"‚è±Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {min_duration} —Å–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–≥–∞ '–≥—É–±–µ—Ä')")
        
        db_manager = DatabaseManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∏—Ö –ø—É—Ç—è–º–∏
        with sqlite3.connect(db_manager.db_path) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–∞–ø–∫–∞–º
            cursor.execute("""
                SELECT 
                    filename,
                    file_path,
                    file_type,
                    encoding,
                    created_at
                FROM files 
                ORDER BY file_path
            """)
            
            files = cursor.fetchall()
            
            if not files:
                print("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞")
                return False
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
            folder_groups = {}
            for file in files:
                filename, file_path, file_type, encoding, created_at = file
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞–ø–∫—É –∏–∑ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–Æ–õ–¨/–ö–ü/ -> –ö–ü)
                path_parts = Path(file_path).parts
                if len(path_parts) >= 2:
                    folder_name = path_parts[-2]  # –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
                else:
                    folder_name = "–ö–æ—Ä–µ–Ω—å"
                
                if folder_name not in folder_groups:
                    folder_groups[folder_name] = []
                
                folder_groups[folder_name].append({
                    'filename': filename,
                    'file_path': file_path,
                    'file_type': file_type,
                    'encoding': encoding,
                    'created_at': created_at
                })
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
            for folder_name, folder_files in folder_groups.items():
                if folder_name == "–ö–æ—Ä–µ–Ω—å":
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ
                
                print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: {folder_name}")
                
                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
                excel_filename = export_dir / f"{folder_name}.xlsx"
                wb = Workbook()
                ws = wb.active
                ws.title = folder_name
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —ç—Ç–æ–π –ø–∞–ø–∫–∏ (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¢–û–õ–¨–ö–û –¥–ª—è '–≥—É–±–µ—Ä')
                cursor.execute("""
                    SELECT 
                        p.point_number,
                        f.filename,
                        p.tag,
                        p.seconds,
                        p.content,
                        p.short_content,
                        p.created_at
                    FROM points p
                    JOIN files f ON p.file_id = f.id
                    WHERE f.file_path LIKE ? AND (p.tag != '–≥—É–±–µ—Ä' OR p.seconds >= ?)
                    ORDER BY f.filename, p.point_number
                """, (f'%{folder_name}%', min_duration))
                
                points = cursor.fetchall()
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–æ—Ç —Ä–∞–Ω–Ω–µ–π –∫ –ø–æ–∑–¥–Ω–µ–π)
                if points:
                    from datetime import datetime
                    def _dt_key(rec):
                        # rec: (point_number, filename, tag, seconds, content, short_content, created_at)
                        fn = rec[1]
                        m = re.search(r'(\d{1,2})\.(\d{2})\s+–Ω–∞\s+(\d{1,2})-(\d{2})\D?', fn)
                        if m:
                            d, M, h, m_ = m.groups()
                            try:
                                # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≥–æ–¥ –Ω–µ –∑–∞–¥–∞—ë—Ç—Å—è —è–≤–Ω–æ; –≤–æ–∑—å–º–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                                return datetime(datetime.now().year, int(M), int(d), int(h), int(m_))
                            except:
                                return datetime.min
                        m2 = re.search(r'(\d{1,2})\.(\d{2})', fn)
                        if m2:
                            d, M = m2.groups()
                            try:
                                return datetime(datetime.now().year, int(M), int(d))
                            except:
                                return datetime.min
                        return datetime.min
                    points = sorted(points, key=_dt_key)
                
                if points:
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = ['‚Ññ', '–î–∞—Ç–∞ —ç—Ñ–∏—Ä–∞', '–¢–µ–≥', '–¢–µ–∫—Å—Ç (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)', '–°–µ–∫—É–Ω–¥—ã']
                    for col, header in enumerate(headers, 1):
                        cell = ws.cell(row=1, column=col, value=header)
                        cell.font = Font(bold=True)
                        cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")
                        cell.alignment = Alignment(horizontal="center")
                    
                    # –î–∞–Ω–Ω—ã–µ
                    row = 2
                    for i, point in enumerate(points, 1):
                        point_number, filename, tag, seconds, content, short_content, created_at = point
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 1-2 —Ü–∏—Ñ—Ä –¥–Ω—è)
                        d_match = re.search(r'(\d{1,2})\.(\d{2})', filename)
                        if d_match:
                            d, M = d_match.groups()
                            broadcast_date = f"{int(d):02d}.{M}"
                        else:
                            broadcast_date = "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–ª–Ω—ã–π
                        display_text = short_content if short_content else content[:100] + "..." if len(content) > 100 else content
                        
                        ws.cell(row=row, column=1, value=i)  # –ü—Ä–æ—Å—Ç–æ–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                        ws.cell(row=row, column=2, value=broadcast_date)
                        ws.cell(row=row, column=3, value=tag.title())
                        ws.cell(row=row, column=4, value=display_text)
                        ws.cell(row=row, column=5, value=seconds)
                        
                        row += 1
                    
                    # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
                    for column in ws.columns:
                        max_length = 0
                        column_letter = column[0].column_letter
                        for cell in column:
                            try:
                                if len(str(cell.value)) > max_length:
                                    max_length = len(str(cell.value))
                            except:
                                pass
                        adjusted_width = min(max_length + 2, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
                        ws.column_dimensions[column_letter].width = adjusted_width
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel —Ñ–∞–π–ª
                wb.save(excel_filename)
                print(f"   ‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_filename.name}")
            
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö Excel –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {len(folder_groups)}")
            
            return True
            
    except ImportError as e:
        print(f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pandas openpyxl")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –æ—Ç—á–µ—Ç–∞: {e}")
        return False


def process_points_with_gpt(db_manager):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É–Ω–∫—Ç—ã —á–µ—Ä–µ–∑ GPT –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é GPT
        from modules.text_shortener import shorten_text
        
        with sqlite3.connect(db_manager.db_path) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–Ω–∫—Ç—ã –±–µ–∑ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            cursor.execute("""
                SELECT id, content, tag, point_number 
                FROM points 
                WHERE (short_content IS NULL OR short_content = '' OR LENGTH(TRIM(short_content)) = 0)
                ORDER BY id
            """)
            
            points_to_process = cursor.fetchall()
            
            if not points_to_process:
                print("‚úÖ –í—Å–µ –ø—É–Ω–∫—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                return
            

            
            processed = 0
            for point_id, content, tag, point_number in points_to_process:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GPT
                    short_content = shorten_text(content)
                    
                    if short_content and not short_content.startswith("–û—à–∏–±–∫–∞"):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if db_manager.update_point_short_content(point_id, short_content):
                            print(f"‚úÖ –ü—É–Ω–∫—Ç {point_number} ({tag}): {short_content}")
                            processed += 1
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ {point_number}")
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT –¥–ª—è –ø—É–Ω–∫—Ç–∞ {point_number}: {short_content}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    import time
                    time.sleep(1)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–Ω–∫—Ç–∞ {point_id}: {e}")
                    continue
            
            print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed}/{len(points_to_process)} –ø—É–Ω–∫—Ç–æ–≤")
            
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å text_shortener –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GPT –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")